from flask import Flask, request, jsonify
from flask_cors import CORS, cross_origin
import cv2
import numpy as np
from ultralytics import YOLO
import os
import base64
import warnings
from datetime import datetime

# ‡∏õ‡∏¥‡∏î warning ‡∏Ç‡∏≠‡∏á PyTorch
warnings.filterwarnings('ignore')

# ‡∏™‡∏£‡πâ‡∏≤‡∏á Flask App
app = Flask(__name__)

# CORS settings ‡∏ó‡∏µ‡πà‡∏Ñ‡∏£‡∏≠‡∏ö‡∏Ñ‡∏•‡∏∏‡∏°‡∏°‡∏≤‡∏Å‡∏Ç‡∏∂‡πâ‡∏ô
CORS(app, resources={
    r"/*": {
        "origins": "*",
        "methods": ["GET", "POST", "PUT", "DELETE", "OPTIONS"],
        "allow_headers": ["Content-Type", "Authorization", "Access-Control-Allow-Origin"],
        "supports_credentials": True,
        "expose_headers": ["Content-Type"]
    }
})

# ‡πÄ‡∏û‡∏¥‡πà‡∏° header ‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏ï‡∏≠‡∏ö‡∏Å‡∏•‡∏±‡∏ö‡∏ó‡∏∏‡∏Å‡∏Ñ‡∏£‡∏±‡πâ‡∏á
@app.after_request
def after_request(response):
    response.headers.add('Access-Control-Allow-Origin', '*')
    response.headers.add('Access-Control-Allow-Headers', 'Content-Type,Authorization,Accept,Origin,X-Requested-With')
    response.headers.add('Access-Control-Allow-Methods', 'GET,PUT,POST,DELETE,OPTIONS')
    response.headers.add('Access-Control-Allow-Credentials', 'true')
    response.headers.add('Access-Control-Max-Age', '86400')
    return response

# ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
print("=" * 50)
print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO...")

# ‚ö†Ô∏è ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå‡∏ï‡∏£‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏´‡πâ‡∏ï‡∏£‡∏á‡∏Å‡∏±‡∏ö‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì
MODEL_PATH = 'model-coin.pt'

try:
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡∏™‡∏ô‡πÉ‡∏à warning
    import torch
    
    # ‡∏ï‡∏±‡πâ‡∏á‡∏Ñ‡πà‡∏≤‡πÉ‡∏´‡πâ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÇ‡∏î‡∏¢‡πÑ‡∏°‡πà‡πÄ‡∏ä‡πá‡∏Ñ weights_only (‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö PyTorch ‡∏ó‡∏∏‡∏Å‡πÄ‡∏ß‡∏≠‡∏£‡πå‡∏ä‡∏±‡∏ô)
    torch_version = torch.__version__.split('+')[0]
    print(f"üì¶ PyTorch version: {torch_version}")
    
    # ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏• YOLO
    model = YOLO(MODEL_PATH)
    
    print("‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!")
    print(f"üì¶ ‡πÑ‡∏ü‡∏•‡πå‡πÇ‡∏°‡πÄ‡∏î‡∏•: {MODEL_PATH}")
    print(f"üìã Classes: {model.names}")
except Exception as e:
    print(f"‚ùå ‡πÇ‡∏´‡∏•‡∏î‡πÇ‡∏°‡πÄ‡∏î‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à: {e}")
    print(f"‚ö†Ô∏è  ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡πÑ‡∏ü‡∏•‡πå {MODEL_PATH} ‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡πÇ‡∏ü‡∏•‡πÄ‡∏î‡∏≠‡∏£‡πå‡πÄ‡∏î‡∏µ‡∏¢‡∏ß‡∏Å‡∏±‡∏ö app.py")
    import traceback
    traceback.print_exc()
    exit()

print("=" * 50)

# Route ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å
@app.route('/')
def home():
    return jsonify({
        'status': 'active',
        'service': 'Coin Detection API',
        'timestamp': datetime.now().isoformat(),
        'endpoints': {
            'detect': 'POST /detect',
            'health': 'GET /health'
        },
        'message': 'ü™ô Coin Detection API is running!'
    })

# Health check endpoint
@app.route('/health')
def health_check():
    return jsonify({
        'status': 'healthy',
        'timestamp': datetime.now().isoformat(),
        'model_loaded': model is not None,
        'model_classes': list(model.names.values()) if model else [],
        'server_time': datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    })

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö OPTIONS (CORS preflight) - ‡∏™‡∏≥‡∏Ñ‡∏±‡∏ç!
@app.route('/detect', methods=['OPTIONS'])
@cross_origin()
def detect_options():
    return jsonify({'status': 'ok'}), 200

# Route ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç
@app.route('/detect', methods=['POST'])
@cross_origin()
def detect_coins():
    try:
        print("\n" + "=" * 50)
        print("üì• ‡∏£‡∏±‡∏ö Request ‡πÉ‡∏´‡∏°‡πà")
        print(f"üïí ‡πÄ‡∏ß‡∏•‡∏≤: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        
        # ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏ß‡πà‡∏≤‡∏°‡∏µ‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏™‡πà‡∏á‡∏°‡∏≤‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
        if 'image' not in request.files:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÉ‡∏ô request")
            return jsonify({
                'success': False,
                'error': '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û'
            }), 400
        
        file = request.files['image']
        
        if file.filename == '':
            print("‚ùå ‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå")
            return jsonify({
                'success': False,
                'error': '‡πÑ‡∏°‡πà‡πÑ‡∏î‡πâ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÑ‡∏ü‡∏•‡πå'
            }), 400
        
        print(f"üìÑ ‡∏ä‡∏∑‡πà‡∏≠‡πÑ‡∏ü‡∏•‡πå: {file.filename}")
        print(f"üìä ‡∏Ç‡∏ô‡∏≤‡∏î‡πÑ‡∏ü‡∏•‡πå: {len(file.read())} bytes")
        
        # Reset file pointer
        file.seek(0)
        
        # ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        print("üîÑ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û...")
        img_bytes = file.read()
        img_array = np.frombuffer(img_bytes, np.uint8)
        img = cv2.imdecode(img_array, cv2.IMREAD_COLOR)
        
        if img is None:
            print("‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ")
            return jsonify({
                'success': False,
                'error': '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡πà‡∏≤‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡πÑ‡∏î‡πâ ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡πÑ‡∏ü‡∏•‡πå'
            }), 400
        
        print(f"üìê ‡∏Ç‡∏ô‡∏≤‡∏î‡∏£‡∏π‡∏õ: {img.shape}")
        
        # ‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ YOLO
        print("ü§ñ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏õ‡∏£‡∏∞‡∏°‡∏ß‡∏•‡∏ú‡∏•‡∏î‡πâ‡∏ß‡∏¢ YOLO...")
        results = model(img, conf=0.5, verbose=False)
        
        # ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡∏≤‡∏£‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö
        detections = results[0].boxes
        coin_count = len(detections)
        
        # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡πÅ‡∏ï‡πà‡∏•‡∏∞‡∏ä‡∏ô‡∏¥‡∏î
        coin_types = {
            '1baht': 0,
            '5baht': 0,
            '10baht': 0
        }
        
        total_value = 0
        
        print(f"‚úÖ ‡∏û‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î: {coin_count} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
        
        if coin_count > 0:
            print("üìä ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç:")
            
            for i, box in enumerate(detections):
                cls = int(box.cls[0])
                conf = float(box.conf[0])
                label = model.names[cls]
                
                print(f"   ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏µ‡πà {i+1}: {label} (‡∏Ñ‡∏ß‡∏≤‡∏°‡∏°‡∏±‡πà‡∏ô‡πÉ‡∏à {conf:.2%})")
                
                # ‡∏ô‡∏±‡∏ö‡∏à‡∏≥‡∏ô‡∏ß‡∏ô‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤
                if label == "1baht":
                    coin_types['1baht'] += 1
                    total_value += 1
                elif label == "5baht":
                    coin_types['5baht'] += 1
                    total_value += 5
                elif label == "10baht":
                    coin_types['10baht'] += 1
                    total_value += 10
        
        print(f"üí∞ ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏°: {total_value} ‡∏ö‡∏≤‡∏ó")
        
        # ‡∏ß‡∏≤‡∏î‡∏Å‡∏£‡∏≠‡∏ö‡∏ö‡∏ô‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û
        img_with_boxes = results[0].plot()
        
        # ‡πÅ‡∏õ‡∏•‡∏á‡∏£‡∏π‡∏õ‡πÄ‡∏õ‡πá‡∏ô base64 ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ
        _, buffer = cv2.imencode('.jpg', img_with_boxes, [cv2.IMWRITE_JPEG_QUALITY, 90])
        img_base64 = base64.b64encode(buffer).decode('utf-8')
        
        print("üéâ ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö‡πÑ‡∏õ‡πÅ‡∏•‡πâ‡∏ß")
        print("=" * 50 + "\n")
        
        # ‡∏™‡πà‡∏á‡∏ú‡∏•‡∏•‡∏±‡∏û‡∏ò‡πå‡∏Å‡∏•‡∏±‡∏ö
        return jsonify({
            'success': True,
            'total_count': coin_count,
            'total_value': total_value,
            'coin_details': {
                '1baht': coin_types['1baht'],
                '5baht': coin_types['5baht'],
                '10baht': coin_types['10baht']
            },
            'image_with_boxes': img_base64,
            'message': f'‡∏û‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î {coin_count} ‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç ‡∏°‡∏π‡∏•‡∏Ñ‡πà‡∏≤‡∏£‡∏ß‡∏° {total_value} ‡∏ö‡∏≤‡∏ó',
            'timestamp': datetime.now().isoformat()
        })
    
    except Exception as e:
        print(f"‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}")
        import traceback
        traceback.print_exc()
        print("=" * 50 + "\n")
        return jsonify({
            'success': False,
            'error': f'‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: {str(e)}',
            'timestamp': datetime.now().isoformat()
        }), 500

# Test endpoint ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô
@app.route('/test', methods=['GET', 'POST'])
@cross_origin()
def test_endpoint():
    return jsonify({
        'success': True,
        'message': '‚úÖ Test endpoint is working!',
        'timestamp': datetime.now().isoformat(),
        'method': request.method
    })

# ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Flask Server
if __name__ == '__main__':
    # ‡∏£‡∏±‡∏ö PORT ‡∏à‡∏≤‡∏Å Environment Variable (‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Deploy)
    port = int(os.environ.get('PORT', 5000))
    
    print("\n" + "üöÄ" * 25)
    print("üöÄ ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Coin Detection Server")
    print(f"üìç PORT: {port}")
    print("ü™ô ‡∏£‡∏≠‡∏á‡∏£‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç: 1, 5, 10 ‡∏ö‡∏≤‡∏ó")
    print("üåê CORS: Enabled for all origins")
    print("üì° Endpoints:")
    print("   GET  /          - ‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏£‡∏Å")
    print("   GET  /health    - ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏™‡∏∏‡∏Ç‡∏†‡∏≤‡∏û")
    print("   POST /detect    - ‡∏ï‡∏£‡∏ß‡∏à‡∏à‡∏±‡∏ö‡πÄ‡∏´‡∏£‡∏µ‡∏¢‡∏ç")
    print("   GET  /test      - ‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô")
    print("üåê ‡∏Å‡∏î Ctrl+C ‡πÄ‡∏û‡∏∑‡πà‡∏≠‡∏´‡∏¢‡∏∏‡∏î Server")
    print("üöÄ" * 25 + "\n")
    
    # debug=False ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö Production
    app.run(debug=False, port=port, host='0.0.0.0')